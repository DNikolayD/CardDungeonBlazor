@page "/deck/addCards/{id}"
@using CardDungeonBlazor.Data;
@using CardDungeonBlazor.Models;
@using CardDungeonBlazor.Controls;
@inject ApplicationDbContext dbcontext
@inject Services.CardAddedToDeck CardsAdded
@inject NavigationManager navManager;


<h3>Add cards to the Deck</h3>
<MudGrid>
    @foreach (var card in CardsAdded.Cards)
    {
        <MudItem Class="d-flex align-center justify-center mud-width-full py-8" xs=3>
            <MudCard>
                <MudCardMedia Image="@card.ImageUrl" />
                <MudCardContent>
                    <MudText Typo="Typo.h5">Card with name @card.Name</MudText>
                    <MudText Typo="Typo.body2">With a value of @card.Value @card.CardType</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudText Typo="Typo.body2">@card.TimesAdded</MudText>
                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Filled.Add" Color="Color.Info" @onclick="() => Add(card.Id)">Add card</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    }
</MudGrid>
<MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="() => Redirect()">Finish the deck</MudButton>
@code {
    [Parameter]
    public string Id { get; set; }
    AddCardsToDeckModel Model;

    protected override void OnInitialized()
    {
        Model = new AddCardsToDeckModel();
        AddCardsToDeck cardsToDeck = new AddCardsToDeck();
        CardsAdded.Cards = cardsToDeck.GetAllCards(dbcontext).Cards;

    }
    void Add(string CardId)
    {
        CardsAdded.Cards.Find(x => x.Id == CardId).TimesAdded++;
        AddCardsToDeck cardsToDeck = new AddCardsToDeck();
        cardsToDeck.AddCardsToDeckWithId(dbcontext, CardId, Id);
    }
    void Redirect()
    {
        navManager.NavigateTo("/decks/all");
    }

}
